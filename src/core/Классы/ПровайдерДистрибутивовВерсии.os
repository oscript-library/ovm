&Пластилин
Перем ФабрикаИнтернетСоединения;

&Пластилин
Перем АдресСайтаОСкрипт;

&Желудь
Процедура ПриСозданииОбъекта()
КонецПроцедуры

// Получить информацию о версиях, доступных к установке
//
//  Возвращаемое значение:
//   ТаблицаЗначений - Информация об установленных версиях:
//		* Алиас - Строка - Алиас версии (имя каталога)
//		* Путь - Строка - Полный путь к каталогу версии
//
Функция ПолучитьСписокДоступныхКУстановкеВерсий() Экспорт
	
	Соединение = ФабрикаИнтернетСоединения.Создать();

	Запрос = Новый HTTPЗапрос("api/archive");
	Ответ = Соединение.Получить(Запрос);
	HTTP_OK = 200;
	Если Ответ.КодСостояния <> HTTP_OK Тогда
		ВызватьИсключение СтрШаблон("Не удалось получить список версий с сайта. Код ошибки: %1", Ответ.КодСостояния);
	КонецЕсли;

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	
	ДоступныеВерсии = Новый ТаблицаЗначений;
	ДоступныеВерсии.Колонки.Добавить("Алиас");
	ДоступныеВерсии.Колонки.Добавить("Путь");

	МассивВерсий = ПрочитатьJSON(ЧтениеJSON, Ложь);
	Для Каждого ОписаниеВерсии Из МассивВерсий Цикл
		ДоступнаяВерсия = ДоступныеВерсии.Добавить();
		ДоступнаяВерсия.Алиас = ОписаниеВерсии.presentation;
		ДоступнаяВерсия.Путь = АдресСайтаОСкрипт + ОписаниеВерсии.link;
	КонецЦикла;

	Возврат ДоступныеВерсии;

КонецФункции

// Возвращает таблицу файлов конкретной версии
//
// Параметры:
//  НомерВерсии - Строка  - версия для которой получаем файлы.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Вид,ИмяФайла,Архитектура,Ссылка
//      Вид: vsix,exe,zip,fdd,scd-win,scd-lin,osx-x64,osx-arm64
//      ИмяФайла: имя файла
//      Архитектура: x64,x86
//      Ссылка: прямая ссылка на данный файл
// См. также:
//     https://oscript.io/api/archive/ - список всех токенов
//     https://oscript.io/api/archive/<токен версии> - данная таблица
//
Функция ПолучитьДоступныеВидыДистрибутивовВерсии(Знач НомерВерсии) Экспорт
	Соединение = ФабрикаИнтернетСоединения.Создать();

	Запрос = Новый HTTPЗапрос("api/archive?all=true");
	Ответ = Соединение.Получить(Запрос);
	HTTP_OK = 200;
	Если Ответ.КодСостояния <> HTTP_OK Тогда
		ВызватьИсключение СтрШаблон("Не удалось найти версию %1 на сайте: Статус: %2, Ответ: %3",
			НомерВерсии,
			Ответ.КодСостояния,
			Ответ.ПолучитьТелоКакСтроку()
		);
	КонецЕсли;

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	
	МассивВерсий = ПрочитатьJSON(ЧтениеJSON, Ложь);
	ИскомыйТокенВерсии = Неопределено;
	Для Каждого ОписаниеВерсии Из МассивВерсий Цикл
		Если НомерВерсии = ОписаниеВерсии.presentation Тогда
			ИскомыйТокенВерсии = ОписаниеВерсии.token;
		КонецЕсли;
	КонецЦикла;

	Если ИскомыйТокенВерсии = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не удалось найти версию %1 на сайте.", НомерВерсии);
	КонецЕсли;

	Запрос = Новый HTTPЗапрос("api/archive/" + ИскомыйТокенВерсии);
	Ответ = Соединение.Получить(Запрос);
	HTTP_OK = 200;
	Если Ответ.КодСостояния <> HTTP_OK Тогда
		ВызватьИсключение СтрШаблон("Не удалось найти файлы версии %1 на сайте: Статус: %2, Ответ: %3",
			НомерВерсии,
			Ответ.КодСостояния,
			Ответ.ПолучитьТелоКакСтроку()
		);
	КонецЕсли;

	ТаблицаРезультата = Новый ТаблицаЗначений();
	ТаблицаРезультата.Колонки.Добавить("Вид");
	ТаблицаРезультата.Колонки.Добавить("ИмяФайла");
	ТаблицаРезультата.Колонки.Добавить("Архитектура");
	ТаблицаРезультата.Колонки.Добавить("Ссылка");

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	
	МассивФайлов = ПрочитатьJSON(ЧтениеJSON, Ложь);
	Для Каждого ОписаниеФайла Из МассивФайлов Цикл
		СтрокаТаблицы = ТаблицаРезультата.Добавить();
		СтрокаТаблицы.Вид = ОписаниеФайла.id;
		СтрокаТаблицы.ИмяФайла = ОписаниеФайла.filename;
		СтрокаТаблицы.Архитектура = ОписаниеФайла.arch;
		СтрокаТаблицы.Ссылка = ОписаниеФайла.link;
	КонецЦикла;

	Возврат ТаблицаРезультата;

КонецФункции
